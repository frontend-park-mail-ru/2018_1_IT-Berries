{
  "env": {
    "browser": true,
    "commonjs": true,
    "es6": true,
    "node" : true
  },
  "extends": "eslint:recommended",
  "parserOptions": {
    "sourceType": "module"
  },
  "rules": {
    //  Это правило обеспечивает согласованный стиль отступов
    "indent": [
      "error",
      2
    ],

    /*
        Это правило обеспечивает согласованные окончания строк независимо от
        операционной системы, VCS или редактора, используемых в вашей кодовой
        базе.
    */
    "linebreak-style": [
      "error",
      "unix"
    ],

    /*
        Это правило обеспечивает последовательное использование либо обратных,
        двойных, либо одинарных кавычек.
    */
    "quotes": [
      "error",
      "single"
    ],

    //  Это правило обеспечивает последовательное использование точек с запятой.
    "semi": [
      "error",
      "always"
    ],

    /*
        Это правило обеспечивает согласованное расстояние до и после запятых
        в объявлениях переменных, литералах массивов, объектных литералах,
        функциональных параметрах и последовательностях.
    */
    "comma-spacing": [
      "error", {
        "before": false,
        "after": true
      }
    ],

    /*
        Это правило требует или запрещает пробелы между именем функции и
        открывающей скобкой.
    */
    "func-call-spacing": [
      "error",
      "never"
    ],

    //  Это правило обеспечивает согласованный стиль привязки для блоков.
    "brace-style": [
      "error"
    ],

    /*
        Это правило обеспечивает согласованность в отношении пробелов после
        слов унарных операторов (new, delete) и после / перед несловестными
        унарными операторами (++, --).
    */
    "space-unary-ops": [
      "error", {
        "words": true,
        "nonwords": false
      }
    ],

    /*
        Это правило направлено на обеспечение пространства вокруг инфиксных
        операторов.
    */
    "space-infix-ops": [
      "error", {
        "int32Hint": false
      }
    ],

    /*
        Это правило предназначено для предотвращения ошибок и повышения
        четкости кода, гарантируя, что операторы блоков завернуты в фигурные
        скобки. Он будет предупреждать, когда он сталкивается с блоками,
        которые пропускают фигурные скобки.
    */
    "curly": [
      "error"
    ],

    /*
        Это правило требует пустых строк до и / или после комментариев. Оно
        может быть включено отдельно для комментариев блока (/ *) и строки (//).
        Это правило не применяется к комментариям, которые отображаются в одной
        строке с кодом и не требуют пустых строк в начале или конце файла.
    */
    "lines-around-comment": [
      "error", {
        "beforeBlockComment": true,
        "afterBlockComment": false,
        "beforeLineComment": true,
        "afterLineComment": false
      }
    ],

    /*
        Это правило направлено на то, чтобы не поощрять использование var и
        поощрять использование const или let вместо него
    */
    "no-var": [
      "error"
    ]



  }
}